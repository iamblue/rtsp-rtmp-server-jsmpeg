// Generated by CoffeeScript 1.12.4

/*
 * Usage

    EventEmitterModule = require './event_emitter'

    class MyClass

     * Apply EventEmitterModule to MyClass
    EventEmitterModule.mixin MyClass

    obj = new MyClass
    obj.on 'testevent', (a, b, c) ->
      console.log "received testevent a=#{a} b=#{b} c=#{c}"

    obj.onAny (eventName, data...) ->
      console.log "received eventName=#{eventName} data=#{data}"

    obj.emit 'testevent', 111, 222, 333
    obj.emit 'anotherevent', 'hello'

Or EventEmitterModule can be injected dynamically into an object
(with slightly worse performance):

    class MyClass
      constructor: ->
        EventEmitterModule.inject this

    obj = new MyClass
    obj.on 'testevent', ->
      console.log "received testevent"

    obj.emit 'testevent'
 */

(function() {
  var EventEmitterModule,
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  EventEmitterModule = (function() {
    function EventEmitterModule() {}

    EventEmitterModule.mixin = function(cls) {
      var e, name, ref, value;
      ref = EventEmitterModule.prototype;
      for (name in ref) {
        if (!hasProp.call(ref, name)) continue;
        value = ref[name];
        try {
          cls.prototype[name] = value;
        } catch (error) {
          e = error;
          throw new Error("Call EventEmitterModule.mixin() after the class definition");
        }
      }
    };

    EventEmitterModule.inject = function(obj) {
      var name, ref, value;
      ref = EventEmitterModule.prototype;
      for (name in ref) {
        if (!hasProp.call(ref, name)) continue;
        value = ref[name];
        obj[name] = value;
      }
      obj.eventListeners = {};
      obj.catchAllEventListeners = [];
    };

    EventEmitterModule.prototype.emit = function() {
      var data, j, k, len, len1, listener, name, ref, ref1, ref2;
      name = arguments[0], data = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (((ref = this.eventListeners) != null ? ref[name] : void 0) != null) {
        ref1 = this.eventListeners[name];
        for (j = 0, len = ref1.length; j < len; j++) {
          listener = ref1[j];
          listener.apply(null, data);
        }
      }
      if (this.catchAllEventListeners != null) {
        ref2 = this.catchAllEventListeners;
        for (k = 0, len1 = ref2.length; k < len1; k++) {
          listener = ref2[k];
          listener.apply(null, [name].concat(slice.call(data)));
        }
      }
    };

    EventEmitterModule.prototype.onAny = function(listener) {
      if (this.catchAllEventListeners != null) {
        return this.catchAllEventListeners.push(listener);
      } else {
        return this.catchAllEventListeners = [listener];
      }
    };

    EventEmitterModule.prototype.offAny = function(listener) {
      var _listener, i, j, len, ref, ref1;
      if (this.catchAllEventListeners != null) {
        ref = this.catchAllEventListeners;
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          _listener = ref[i];
          if (_listener === listener) {
            [].splice.apply(this.catchAllEventListeners, [i, i - i + 1].concat(ref1 = [])), ref1;
          }
        }
      }
    };

    EventEmitterModule.prototype.on = function(name, listener) {
      if (this.eventListeners == null) {
        this.eventListeners = {};
      }
      if (this.eventListeners[name] != null) {
        return this.eventListeners[name].push(listener);
      } else {
        return this.eventListeners[name] = [listener];
      }
    };

    EventEmitterModule.prototype.removeListener = function(name, listener) {
      var _listener, i, j, len, ref, ref1, ref2;
      if (((ref = this.eventListeners) != null ? ref[name] : void 0) != null) {
        ref1 = this.eventListeners[name];
        for (i = j = 0, len = ref1.length; j < len; i = ++j) {
          _listener = ref1[i];
          if (_listener === listener) {
            [].splice.apply(this.eventListeners, [i, i - i + 1].concat(ref2 = [])), ref2;
          }
        }
      }
    };

    EventEmitterModule.prototype.off = function(name, listener) {
      return this.removeListener.apply(this, arguments);
    };

    return EventEmitterModule;

  })();

  module.exports = EventEmitterModule;

}).call(this);
